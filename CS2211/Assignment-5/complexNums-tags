// Manipulating complex numbers using structs with tags 

#include <stdio.h>
#include <stdlib.h>

// Declaration of struct with tag
struct complex_t{
    double real, imaginary;
};

// Function prototypes
struct complex_t multiply(struct complex_t x, struct complex_t y);
struct complex_t * divide(struct complex_t * x, struct complex_t * y);

// Client program
int main (void) {
    
    struct complex_t x, y, product, * quotient;
    
    // Prompt for user to input values for each complex number
    printf("A complex number can be represented as a + bi, where a is the real part and b is the coefficient of the imaginary unit.\n");
    
    printf("\nEnter the values of the first complex number's real (a) and imaginary (b) parts (eg. 5 7): ");
    scanf("%lf %lf", &x.real, &x.imaginary);
    
    printf("\nEnter the values of the second complex number's real (a) and imaginary (b) parts (eg. 3 6): ");
    scanf("%lf %lf", &y.real, &y.imaginary);
    
    // Calculate product and quotient of complex numbers
    product = multiply(x, y);
    printf("\nThe product of these complex numbers is %lf + (%lf)i\n", product.real, product.imaginary);
    
    quotient = divide(&x, &y);
    printf("\nThe quotient of these complex numbers is %lf + (%lf)i\n", quotient->real, quotient->imaginary);
    
    free(quotient);     // Deallocate memory to avoid leak
    quotient = NULL;    // Set to NULL to avoid dangling pointer
    
    return 0;
}

// Function that multiplies two complex numbers (passed by value)
struct complex_t multiply(struct complex_t x, struct complex_t y) {
    
    struct complex_t product;
    
    // Multiplication calculations to determine components of product
    product.real = (x.real * y.real) - (x.imaginary * y.imaginary);
    product.imaginary = (x.real * y.imaginary) + (x.imaginary * y.real);
    
    return product;
}

// Function that divides two complex numbers (passed by reference)
struct complex_t * divide(struct complex_t * x, struct complex_t * y) {
    
    // Pointer needed for dynamically allocated complex_t object
    struct complex_t * quotient = malloc(sizeof(struct complex_t));
    
    if (quotient != NULL && (y->real * y->real + y->imaginary * y->imaginary)) {
        
        // Calculate real and imaginary components of quotient
        quotient->real = ((x->real * y->real) + (x->imaginary * y->imaginary)) / (y->real * y->real + y->imaginary * y->imaginary);
        
        quotient->imaginary = ((y->real * x->imaginary) - (x->real * y->imaginary)) / (y->real * y->real + y->imaginary * y->imaginary);
        
    } else {
        
        // If division operation fails, print error message and exit
        printf("\nError in division operation!\n");
        exit(EXIT_FAILURE);
        
    }
    
    // Return pointer to dynamically allocated object
    return quotient;
}
